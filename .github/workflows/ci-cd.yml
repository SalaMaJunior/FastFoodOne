name: FastBite CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../mobile-app/customer-app && npm ci
          cd ../../restaurant-dashboard && npm ci

      - name: Lint backend
        run: |
          cd backend
          npm run lint
          npm run type-check

      - name: Lint mobile app
        run: |
          cd mobile-app/customer-app
          npm run lint
          npm run type-check

      - name: Lint restaurant dashboard
        run: |
          cd restaurant-dashboard
          npm run lint
          npm run type-check

      - name: Run backend tests
        run: |
          cd backend
          npm test -- --coverage
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/fastbite-test
          REDIS_HOST: localhost

      - name: Run mobile app tests
        run: |
          cd mobile-app/customer-app
          npm test -- --coverage

      - name: Run restaurant dashboard tests
        run: |
          cd restaurant-dashboard
          npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info,./mobile-app/customer-app/coverage/lcov.info,./restaurant-dashboard/coverage/lcov.info

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          cd backend && npm audit --audit-level moderate
          cd ../mobile-app/customer-app && npm audit --audit-level moderate
          cd ../../restaurant-dashboard && npm audit --audit-level moderate

  # Build & Test Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, restaurant-service, order-service, payment-service, delivery-service, notification-service, ai-service, analytics-service, restaurant-dashboard]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/${{ matrix.service === 'restaurant-dashboard' && '..' || '' }}/${{ matrix.service === 'restaurant-dashboard' && 'restaurant-dashboard' || matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-images]
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci

      - name: Wait for services
        run: |
          npx wait-on tcp:27017 tcp:6379

      - name: Run integration tests
        run: |
          cd backend
          npm run test:integration
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/fastbite-test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-images]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js
          k6 run tests/performance/stress-test.js

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke tests here

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Mobile App Build
  build-mobile:
    name: Build Mobile Apps
    runs-on: macos-latest
    needs: [quality-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: |
          cd mobile-app/customer-app && npm ci

      - name: Build Android APK
        run: |
          cd mobile-app/customer-app
          npx react-native run-android --variant=release

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: mobile-app/customer-app/android/app/build/outputs/apk/release/app-release.apk

      - name: Build iOS (if needed)
        run: |
          cd mobile-app/customer-app/ios
          xcodebuild -workspace FastBiteCustomerApp.xcworkspace -scheme FastBiteCustomerApp -configuration Release -destination generic/platform=iOS -archivePath FastBiteCustomerApp.xcarchive archive

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, build-mobile]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'FastBite deployment successful! 🚀'

      - name: Notify failure
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'FastBite deployment failed! ❌'

